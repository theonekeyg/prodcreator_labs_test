// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package aggregation_spotter

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Keeper struct {
	IsAllowed bool
	Key       ag_solanago.PublicKey
}

var KeeperDiscriminator = [8]byte{127, 221, 194, 46, 120, 73, 144, 77}

func (obj Keeper) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(KeeperDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsAllowed` param:
	err = encoder.Encode(obj.IsAllowed)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Keeper) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(KeeperDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[127 221 194 46 120 73 144 77]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsAllowed`:
	err = decoder.Decode(&obj.IsAllowed)
	if err != nil {
		return err
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	return nil
}

type AllowedContract struct {
	IsAllowed bool
	Key       ag_solanago.PublicKey
}

var AllowedContractDiscriminator = [8]byte{98, 13, 228, 232, 128, 25, 106, 78}

func (obj AllowedContract) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AllowedContractDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsAllowed` param:
	err = encoder.Encode(obj.IsAllowed)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AllowedContract) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AllowedContractDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[98 13 228 232 128 25 106 78]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsAllowed`:
	err = decoder.Decode(&obj.IsAllowed)
	if err != nil {
		return err
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	return nil
}

type Operation struct {
	ProofInfo     ProofInfo
	OperationData OperationData
}

var OperationDiscriminator = [8]byte{171, 150, 196, 17, 229, 166, 58, 44}

func (obj Operation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OperationDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ProofInfo` param:
	err = encoder.Encode(obj.ProofInfo)
	if err != nil {
		return err
	}
	// Serialize `OperationData` param:
	err = encoder.Encode(obj.OperationData)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Operation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OperationDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[171 150 196 17 229 166 58 44]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ProofInfo`:
	err = decoder.Decode(&obj.ProofInfo)
	if err != nil {
		return err
	}
	// Deserialize `OperationData`:
	err = decoder.Decode(&obj.OperationData)
	if err != nil {
		return err
	}
	return nil
}

type AggregationSpotter struct {
	IsInitialized   bool
	Admin           ag_solanago.PublicKey
	Executor        ag_solanago.PublicKey
	NumberOfKeepers uint64

	// 10000 = 100%
	RateDecimals uint64

	// percentage of proofs div numberOfAllowedKeepers which should be reached to approve operation. Scaled with 10000 decimals, e.g. 6000 is 60%
	ConsensusTargetRate uint64
}

var AggregationSpotterDiscriminator = [8]byte{23, 40, 167, 206, 67, 170, 120, 226}

func (obj AggregationSpotter) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AggregationSpotterDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `IsInitialized` param:
	err = encoder.Encode(obj.IsInitialized)
	if err != nil {
		return err
	}
	// Serialize `Admin` param:
	err = encoder.Encode(obj.Admin)
	if err != nil {
		return err
	}
	// Serialize `Executor` param:
	err = encoder.Encode(obj.Executor)
	if err != nil {
		return err
	}
	// Serialize `NumberOfKeepers` param:
	err = encoder.Encode(obj.NumberOfKeepers)
	if err != nil {
		return err
	}
	// Serialize `RateDecimals` param:
	err = encoder.Encode(obj.RateDecimals)
	if err != nil {
		return err
	}
	// Serialize `ConsensusTargetRate` param:
	err = encoder.Encode(obj.ConsensusTargetRate)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AggregationSpotter) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AggregationSpotterDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[23 40 167 206 67 170 120 226]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `IsInitialized`:
	err = decoder.Decode(&obj.IsInitialized)
	if err != nil {
		return err
	}
	// Deserialize `Admin`:
	err = decoder.Decode(&obj.Admin)
	if err != nil {
		return err
	}
	// Deserialize `Executor`:
	err = decoder.Decode(&obj.Executor)
	if err != nil {
		return err
	}
	// Deserialize `NumberOfKeepers`:
	err = decoder.Decode(&obj.NumberOfKeepers)
	if err != nil {
		return err
	}
	// Deserialize `RateDecimals`:
	err = decoder.Decode(&obj.RateDecimals)
	if err != nil {
		return err
	}
	// Deserialize `ConsensusTargetRate`:
	err = decoder.Decode(&obj.ConsensusTargetRate)
	if err != nil {
		return err
	}
	return nil
}
