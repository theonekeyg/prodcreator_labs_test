// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package aggregation_spotter

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("3XQdG1Zpk151xuGHSd6DUkNuh9m9i3M8ptxJEHNfZdJ2")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "AggregationSpotter"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// @notice Create and add keeper to whitelist
	// @param keeper address of keeper to add
	Instruction_CreateKeeper = ag_binary.TypeID([8]byte{132, 24, 10, 188, 86, 148, 152, 100})

	// @notice Reenable keeper in whitelist
	// @param keeper address of keeper to remove
	Instruction_EnableKeeper = ag_binary.TypeID([8]byte{4, 25, 113, 56, 221, 99, 171, 157})

	// @notice Disable keeper from whitelist
	// @param keeper address of keeper to remove
	Instruction_RemoveKeeper = ag_binary.TypeID([8]byte{193, 167, 169, 215, 44, 36, 88, 247})

	// @notice Adding contract to whitelist
	// @param _contract address of contract to add
	Instruction_AddAllowedContract = ag_binary.TypeID([8]byte{201, 185, 31, 160, 87, 164, 232, 214})

	// @notice Removing contract from whitelist
	// @param _contract address of contract to remove
	Instruction_RemoveAllowedContract = ag_binary.TypeID([8]byte{19, 171, 49, 13, 131, 136, 154, 125})

	// @notice Setting of target rate
	// @param rate target rate
	Instruction_SetConsensusTargetRate = ag_binary.TypeID([8]byte{169, 99, 134, 191, 4, 103, 164, 143})

	Instruction_CreateOperation = ag_binary.TypeID([8]byte{61, 70, 194, 45, 234, 27, 71, 14})

	Instruction_ProposeOperation = ag_binary.TypeID([8]byte{138, 188, 18, 209, 140, 122, 139, 187})

	// @notice execute approved operation
	Instruction_ExecuteOperation = ag_binary.TypeID([8]byte{105, 240, 250, 159, 65, 132, 111, 185})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_CreateKeeper:
		return "CreateKeeper"
	case Instruction_EnableKeeper:
		return "EnableKeeper"
	case Instruction_RemoveKeeper:
		return "RemoveKeeper"
	case Instruction_AddAllowedContract:
		return "AddAllowedContract"
	case Instruction_RemoveAllowedContract:
		return "RemoveAllowedContract"
	case Instruction_SetConsensusTargetRate:
		return "SetConsensusTargetRate"
	case Instruction_CreateOperation:
		return "CreateOperation"
	case Instruction_ProposeOperation:
		return "ProposeOperation"
	case Instruction_ExecuteOperation:
		return "ExecuteOperation"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"create_keeper", (*CreateKeeper)(nil),
		},
		{
			"enable_keeper", (*EnableKeeper)(nil),
		},
		{
			"remove_keeper", (*RemoveKeeper)(nil),
		},
		{
			"add_allowed_contract", (*AddAllowedContract)(nil),
		},
		{
			"remove_allowed_contract", (*RemoveAllowedContract)(nil),
		},
		{
			"set_consensus_target_rate", (*SetConsensusTargetRate)(nil),
		},
		{
			"create_operation", (*CreateOperation)(nil),
		},
		{
			"propose_operation", (*ProposeOperation)(nil),
		},
		{
			"execute_operation", (*ExecuteOperation)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
