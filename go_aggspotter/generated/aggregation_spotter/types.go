// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package aggregation_spotter

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type KeeperProof struct {
	Keeper   ag_solanago.PublicKey
	GasPrice uint64
}

func (obj KeeperProof) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Keeper` param:
	err = encoder.Encode(obj.Keeper)
	if err != nil {
		return err
	}
	// Serialize `GasPrice` param:
	err = encoder.Encode(obj.GasPrice)
	if err != nil {
		return err
	}
	return nil
}

func (obj *KeeperProof) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Keeper`:
	err = decoder.Decode(&obj.Keeper)
	if err != nil {
		return err
	}
	// Deserialize `GasPrice`:
	err = decoder.Decode(&obj.GasPrice)
	if err != nil {
		return err
	}
	return nil
}

type ProofInfo struct {
	IsApproved     bool
	IsExecuted     bool
	ProofsCount    uint64
	ProofedKeepers []KeeperProof
}

func (obj ProofInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `IsApproved` param:
	err = encoder.Encode(obj.IsApproved)
	if err != nil {
		return err
	}
	// Serialize `IsExecuted` param:
	err = encoder.Encode(obj.IsExecuted)
	if err != nil {
		return err
	}
	// Serialize `ProofsCount` param:
	err = encoder.Encode(obj.ProofsCount)
	if err != nil {
		return err
	}
	// Serialize `ProofedKeepers` param:
	err = encoder.Encode(obj.ProofedKeepers)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ProofInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `IsApproved`:
	err = decoder.Decode(&obj.IsApproved)
	if err != nil {
		return err
	}
	// Deserialize `IsExecuted`:
	err = decoder.Decode(&obj.IsExecuted)
	if err != nil {
		return err
	}
	// Deserialize `ProofsCount`:
	err = decoder.Decode(&obj.ProofsCount)
	if err != nil {
		return err
	}
	// Deserialize `ProofedKeepers`:
	err = decoder.Decode(&obj.ProofedKeepers)
	if err != nil {
		return err
	}
	return nil
}

type OperationData struct {
	Contr    ag_solanago.PublicKey
	Accounts []ag_solanago.PublicKey
}

func (obj OperationData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Contr` param:
	err = encoder.Encode(obj.Contr)
	if err != nil {
		return err
	}
	// Serialize `Accounts` param:
	err = encoder.Encode(obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OperationData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Contr`:
	err = decoder.Decode(&obj.Contr)
	if err != nil {
		return err
	}
	// Deserialize `Accounts`:
	err = decoder.Decode(&obj.Accounts)
	if err != nil {
		return err
	}
	return nil
}
