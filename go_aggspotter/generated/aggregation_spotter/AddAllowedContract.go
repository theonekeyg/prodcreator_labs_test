// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package aggregation_spotter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// @notice Adding contract to whitelist
// @param _contract address of contract to add
type AddAllowedContract struct {
	Contract *ag_solanago.PublicKey

	// [0] = [WRITE] spotter
	//
	// [1] = [WRITE, SIGNER] admin
	//
	// [2] = [WRITE] contractPda
	//
	// [3] = [] contractAcc
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddAllowedContractInstructionBuilder creates a new `AddAllowedContract` instruction builder.
func NewAddAllowedContractInstructionBuilder() *AddAllowedContract {
	nd := &AddAllowedContract{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetContract sets the "contract" parameter.
func (inst *AddAllowedContract) SetContract(contract ag_solanago.PublicKey) *AddAllowedContract {
	inst.Contract = &contract
	return inst
}

// SetSpotterAccount sets the "spotter" account.
func (inst *AddAllowedContract) SetSpotterAccount(spotter ag_solanago.PublicKey) *AddAllowedContract {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(spotter).WRITE()
	return inst
}

// GetSpotterAccount gets the "spotter" account.
func (inst *AddAllowedContract) GetSpotterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAdminAccount sets the "admin" account.
func (inst *AddAllowedContract) SetAdminAccount(admin ag_solanago.PublicKey) *AddAllowedContract {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AddAllowedContract) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetContractPdaAccount sets the "contractPda" account.
func (inst *AddAllowedContract) SetContractPdaAccount(contractPda ag_solanago.PublicKey) *AddAllowedContract {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(contractPda).WRITE()
	return inst
}

// GetContractPdaAccount gets the "contractPda" account.
func (inst *AddAllowedContract) GetContractPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetContractAccAccount sets the "contractAcc" account.
func (inst *AddAllowedContract) SetContractAccAccount(contractAcc ag_solanago.PublicKey) *AddAllowedContract {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(contractAcc)
	return inst
}

// GetContractAccAccount gets the "contractAcc" account.
func (inst *AddAllowedContract) GetContractAccAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddAllowedContract) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddAllowedContract {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddAllowedContract) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst AddAllowedContract) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddAllowedContract,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddAllowedContract) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddAllowedContract) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Contract == nil {
			return errors.New("Contract parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Spotter is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ContractPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ContractAcc is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddAllowedContract) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddAllowedContract")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Contract", *inst.Contract))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      spotter", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        admin", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  contractPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  contractAcc", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj AddAllowedContract) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Contract` param:
	err = encoder.Encode(obj.Contract)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddAllowedContract) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Contract`:
	err = decoder.Decode(&obj.Contract)
	if err != nil {
		return err
	}
	return nil
}

// NewAddAllowedContractInstruction declares a new AddAllowedContract instruction with the provided parameters and accounts.
func NewAddAllowedContractInstruction(
	// Parameters:
	contract ag_solanago.PublicKey,
	// Accounts:
	spotter ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	contractPda ag_solanago.PublicKey,
	contractAcc ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddAllowedContract {
	return NewAddAllowedContractInstructionBuilder().
		SetContract(contract).
		SetSpotterAccount(spotter).
		SetAdminAccount(admin).
		SetContractPdaAccount(contractPda).
		SetContractAccAccount(contractAcc).
		SetSystemProgramAccount(systemProgram)
}
