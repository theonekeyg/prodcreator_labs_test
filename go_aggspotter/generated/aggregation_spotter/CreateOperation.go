// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package aggregation_spotter

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateOperation is the `createOperation` instruction.
type CreateOperation struct {
	OperationData *OperationData
	GasPrice      *uint64

	// [0] = [] spotter
	//
	// [1] = [WRITE, SIGNER] keeperAcc
	//
	// [2] = [WRITE] keeperPda
	//
	// [3] = [WRITE] operationPda
	//
	// [4] = [] operationAcc
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOperationInstructionBuilder creates a new `CreateOperation` instruction builder.
func NewCreateOperationInstructionBuilder() *CreateOperation {
	nd := &CreateOperation{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetOperationData sets the "operationData" parameter.
func (inst *CreateOperation) SetOperationData(operationData OperationData) *CreateOperation {
	inst.OperationData = &operationData
	return inst
}

// SetGasPrice sets the "gasPrice" parameter.
func (inst *CreateOperation) SetGasPrice(gasPrice uint64) *CreateOperation {
	inst.GasPrice = &gasPrice
	return inst
}

// SetSpotterAccount sets the "spotter" account.
func (inst *CreateOperation) SetSpotterAccount(spotter ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(spotter)
	return inst
}

// GetSpotterAccount gets the "spotter" account.
func (inst *CreateOperation) GetSpotterAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetKeeperAccAccount sets the "keeperAcc" account.
func (inst *CreateOperation) SetKeeperAccAccount(keeperAcc ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(keeperAcc).WRITE().SIGNER()
	return inst
}

// GetKeeperAccAccount gets the "keeperAcc" account.
func (inst *CreateOperation) GetKeeperAccAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetKeeperPdaAccount sets the "keeperPda" account.
func (inst *CreateOperation) SetKeeperPdaAccount(keeperPda ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(keeperPda).WRITE()
	return inst
}

// GetKeeperPdaAccount gets the "keeperPda" account.
func (inst *CreateOperation) GetKeeperPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOperationPdaAccount sets the "operationPda" account.
func (inst *CreateOperation) SetOperationPdaAccount(operationPda ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(operationPda).WRITE()
	return inst
}

// GetOperationPdaAccount gets the "operationPda" account.
func (inst *CreateOperation) GetOperationPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOperationAccAccount sets the "operationAcc" account.
func (inst *CreateOperation) SetOperationAccAccount(operationAcc ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(operationAcc)
	return inst
}

// GetOperationAccAccount gets the "operationAcc" account.
func (inst *CreateOperation) GetOperationAccAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateOperation) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOperation {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateOperation) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst CreateOperation) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOperation,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOperation) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOperation) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OperationData == nil {
			return errors.New("OperationData parameter is not set")
		}
		if inst.GasPrice == nil {
			return errors.New("GasPrice parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Spotter is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.KeeperAcc is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.KeeperPda is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OperationPda is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OperationAcc is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateOperation) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOperation")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OperationData", *inst.OperationData))
						paramsBranch.Child(ag_format.Param("     GasPrice", *inst.GasPrice))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      spotter", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    keeperAcc", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    keeperPda", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" operationPda", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta(" operationAcc", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj CreateOperation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OperationData` param:
	err = encoder.Encode(obj.OperationData)
	if err != nil {
		return err
	}
	// Serialize `GasPrice` param:
	err = encoder.Encode(obj.GasPrice)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateOperation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OperationData`:
	err = decoder.Decode(&obj.OperationData)
	if err != nil {
		return err
	}
	// Deserialize `GasPrice`:
	err = decoder.Decode(&obj.GasPrice)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateOperationInstruction declares a new CreateOperation instruction with the provided parameters and accounts.
func NewCreateOperationInstruction(
	// Parameters:
	operationData OperationData,
	gasPrice uint64,
	// Accounts:
	spotter ag_solanago.PublicKey,
	keeperAcc ag_solanago.PublicKey,
	keeperPda ag_solanago.PublicKey,
	operationPda ag_solanago.PublicKey,
	operationAcc ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateOperation {
	return NewCreateOperationInstructionBuilder().
		SetOperationData(operationData).
		SetGasPrice(gasPrice).
		SetSpotterAccount(spotter).
		SetKeeperAccAccount(keeperAcc).
		SetKeeperPdaAccount(keeperPda).
		SetOperationPdaAccount(operationPda).
		SetOperationAccAccount(operationAcc).
		SetSystemProgramAccount(systemProgram)
}
